-- File auto generated by servant-purescript! --
module Gonimo.WebAPI.Subscriber where

import Prelude

import Control.Monad.Aff.Class (class MonadAff, liftAff)
import Control.Monad.Error.Class (class MonadError)
import Control.Monad.Reader.Class (ask, class MonadReader)
import Data.Argonaut.Generic.Aeson (decodeJson, encodeJson)
import Data.Argonaut.Printer (printJson)
import Data.Maybe (Maybe(..))
import Data.Nullable (Nullable(), toNullable)
import Data.Tuple (Tuple, Tuple(..))
import Global (encodeURIComponent)
import Gonimo.Server.DbEntities (Account, Client, Family)
import Gonimo.Server.Types (AuthToken, ClientType)
import Gonimo.Types (Key, Secret)
import Gonimo.WebAPI (SPParams_(..))
import Network.HTTP.Affjax (AJAX)
import Prim (Array, String)
import Servant.PureScript.Affjax (AjaxError(..), affjax, defaultRequest)
import Servant.PureScript.Settings (SPSettings_(..), gDefaultToURLPiece)
import Servant.PureScript.Util (encodeListQuery, encodeQueryItem, encodeURLPiece, getResult)
import Servant.Subscriber (ToUserType)
import Servant.Subscriber.Request (HttpRequest(..))
import Servant.Subscriber.Subscriptions (Subscriptions, makeSubscriptions)
import Servant.Subscriber.Types (Path(..))
import Servant.Subscriber.Util (TypedToUser, subGenFlagQuery, subGenListQuery, subGenNormalQuery, toUserType)

import Gonimo.WebAPI.MakeRequests as MakeRequests

getFamiliesByAccountId :: forall m a. MonadReader (SPSettings_ SPParams_) m =>
                          TypedToUser (Array (Tuple (Key Family) Family)) a
                          -> Key Account -> m (Subscriptions a)
getFamiliesByAccountId spToUser_ accountId = do
  spReq <- MakeRequests.getFamiliesByAccountId accountId
  pure $ makeSubscriptions spReq (toUserType spToUser_)

receiveSocketByFamilyIdByToClient :: forall m a.
                                     MonadReader (SPSettings_ SPParams_) m =>
                                     TypedToUser (Tuple (Key Client) Secret) a
                                     -> Key Family -> Key Client
                                     -> m (Subscriptions a)
receiveSocketByFamilyIdByToClient spToUser_ familyId toClient = do
  spReq <- MakeRequests.receiveSocketByFamilyIdByToClient familyId toClient
  pure $ makeSubscriptions spReq (toUserType spToUser_)

receiveSocketByFamilyIdByFromClientByToClientByChannelId :: forall m a.
                                                            MonadReader (SPSettings_ SPParams_) m
                                                            =>
                                                            TypedToUser String a
                                                            -> Key Family
                                                            -> Key Client
                                                            -> Key Client
                                                            -> Secret
                                                            -> m (Subscriptions a)
receiveSocketByFamilyIdByFromClientByToClientByChannelId spToUser_ familyId
                                                         fromClient toClient
                                                         channelId = do
  spReq <- MakeRequests.receiveSocketByFamilyIdByFromClientByToClientByChannelId familyId
                                                                                 fromClient
                                                                                 toClient
                                                                                 channelId
  pure $ makeSubscriptions spReq (toUserType spToUser_)

getOnlineStatusByFamilyId :: forall m a. MonadReader (SPSettings_ SPParams_) m
                             =>
                             TypedToUser (Array (Tuple (Key Client) ClientType)) a
                             -> Key Family -> m (Subscriptions a)
getOnlineStatusByFamilyId spToUser_ familyId = do
  spReq <- MakeRequests.getOnlineStatusByFamilyId familyId
  pure $ makeSubscriptions spReq (toUserType spToUser_)

