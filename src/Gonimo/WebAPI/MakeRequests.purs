-- File auto generated by servant-purescript! --
module Gonimo.WebAPI.MakeRequests where

import Prelude

import Control.Monad.Aff.Class (class MonadAff, liftAff)
import Control.Monad.Error.Class (class MonadError)
import Control.Monad.Reader.Class (ask, class MonadReader)
import Data.Argonaut.Generic.Aeson (decodeJson, encodeJson)
import Data.Argonaut.Printer (printJson)
import Data.Maybe (Maybe(..))
import Data.Nullable (Nullable(), toNullable)
import Data.Tuple (Tuple, Tuple(..))
import Global (encodeURIComponent)
import Gonimo.Server.DbEntities (Account, Device, Family, Invitation)
import Gonimo.Server.Types (AuthToken, Coffee, DeviceType)
import Gonimo.Types (Key, Secret)
import Gonimo.WebAPI (SPParams_(..))
import Gonimo.WebAPI.Types (AuthData, DeviceInfo, InvitationInfo, InvitationReply, SendInvitation)
import Network.HTTP.Affjax (AJAX)
import Prelude (Unit)
import Prim (Array, String)
import Servant.PureScript.Affjax (AjaxError(..), affjax, defaultRequest)
import Servant.PureScript.Settings (SPSettings_(..), gDefaultToURLPiece)
import Servant.PureScript.Util (encodeListQuery, encodeQueryItem, encodeURLPiece, getResult)
import Servant.Subscriber (ToUserType)
import Servant.Subscriber.Request (HttpRequest(..))
import Servant.Subscriber.Subscriptions (Subscriptions, makeSubscriptions)
import Servant.Subscriber.Types (Path(..))
import Servant.Subscriber.Util (TypedToUser, subGenFlagQuery, subGenListQuery, subGenNormalQuery, toUserType)

postAccounts :: forall m. MonadReader (SPSettings_ SPParams_) m => m HttpRequest
postAccounts = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let baseURL = spParams_.baseURL
  let httpMethod = "POST"
  let reqPath = Path ["accounts"]
  let reqHeaders =
        []
  let reqQuery =
        []
  let spReq = HttpRequest
                { httpMethod: httpMethod
                , httpPath: reqPath
                , httpHeaders: reqHeaders
                , httpQuery: reqQuery
                , httpBody: ""
                }
  pure spReq

postInvitations :: forall m. MonadReader (SPSettings_ SPParams_) m => Key Family
                   -> m HttpRequest
postInvitations reqBody = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let authorization = spParams_.authorization
  let baseURL = spParams_.baseURL
  let httpMethod = "POST"
  let reqPath = Path ["invitations"]
  let reqHeaders =
        [Tuple "Authorization" (gDefaultToURLPiece authorization)]
  let reqQuery =
        []
  let spReq = HttpRequest
                { httpMethod: httpMethod
                , httpPath: reqPath
                , httpHeaders: reqHeaders
                , httpQuery: reqQuery
                , httpBody: printJson <<< encodeJson $ reqBody
                }
  pure spReq

deleteInvitationsByInvitationSecret :: forall m.
                                       MonadReader (SPSettings_ SPParams_) m =>
                                       InvitationReply -> Secret
                                       -> m HttpRequest
deleteInvitationsByInvitationSecret reqBody invitationSecret = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let authorization = spParams_.authorization
  let baseURL = spParams_.baseURL
  let httpMethod = "DELETE"
  let reqPath = Path ["invitations" , gDefaultToURLPiece invitationSecret]
  let reqHeaders =
        [Tuple "Authorization" (gDefaultToURLPiece authorization)]
  let reqQuery =
        []
  let spReq = HttpRequest
                { httpMethod: httpMethod
                , httpPath: reqPath
                , httpHeaders: reqHeaders
                , httpQuery: reqQuery
                , httpBody: printJson <<< encodeJson $ reqBody
                }
  pure spReq

postInvitationOutbox :: forall m. MonadReader (SPSettings_ SPParams_) m =>
                        SendInvitation -> m HttpRequest
postInvitationOutbox reqBody = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let authorization = spParams_.authorization
  let baseURL = spParams_.baseURL
  let httpMethod = "POST"
  let reqPath = Path ["invitationOutbox"]
  let reqHeaders =
        [Tuple "Authorization" (gDefaultToURLPiece authorization)]
  let reqQuery =
        []
  let spReq = HttpRequest
                { httpMethod: httpMethod
                , httpPath: reqPath
                , httpHeaders: reqHeaders
                , httpQuery: reqQuery
                , httpBody: printJson <<< encodeJson $ reqBody
                }
  pure spReq

putInvitationInfoByInvitationSecret :: forall m.
                                       MonadReader (SPSettings_ SPParams_) m =>
                                       Secret -> m HttpRequest
putInvitationInfoByInvitationSecret invitationSecret = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let authorization = spParams_.authorization
  let baseURL = spParams_.baseURL
  let httpMethod = "PUT"
  let reqPath = Path ["invitationInfo" , gDefaultToURLPiece invitationSecret]
  let reqHeaders =
        [Tuple "Authorization" (gDefaultToURLPiece authorization)]
  let reqQuery =
        []
  let spReq = HttpRequest
                { httpMethod: httpMethod
                , httpPath: reqPath
                , httpHeaders: reqHeaders
                , httpQuery: reqQuery
                , httpBody: ""
                }
  pure spReq

getDeviceInfosByFamilyId :: forall m. MonadReader (SPSettings_ SPParams_) m =>
                            Key Family -> m HttpRequest
getDeviceInfosByFamilyId familyId = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let authorization = spParams_.authorization
  let baseURL = spParams_.baseURL
  let httpMethod = "GET"
  let reqPath = Path ["deviceInfos" , gDefaultToURLPiece familyId]
  let reqHeaders =
        [Tuple "Authorization" (gDefaultToURLPiece authorization)]
  let reqQuery =
        []
  let spReq = HttpRequest
                { httpMethod: httpMethod
                , httpPath: reqPath
                , httpHeaders: reqHeaders
                , httpQuery: reqQuery
                , httpBody: ""
                }
  pure spReq

getAccountsByAccountIdFamilies :: forall m.
                                  MonadReader (SPSettings_ SPParams_) m =>
                                  Key Account -> m HttpRequest
getAccountsByAccountIdFamilies accountId = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let authorization = spParams_.authorization
  let baseURL = spParams_.baseURL
  let httpMethod = "GET"
  let reqPath = Path ["accounts" , gDefaultToURLPiece accountId , "families"]
  let reqHeaders =
        [Tuple "Authorization" (gDefaultToURLPiece authorization)]
  let reqQuery =
        []
  let spReq = HttpRequest
                { httpMethod: httpMethod
                , httpPath: reqPath
                , httpHeaders: reqHeaders
                , httpQuery: reqQuery
                , httpBody: ""
                }
  pure spReq

postFamilies :: forall m. MonadReader (SPSettings_ SPParams_) m => String
                -> m HttpRequest
postFamilies reqBody = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let authorization = spParams_.authorization
  let baseURL = spParams_.baseURL
  let httpMethod = "POST"
  let reqPath = Path ["families"]
  let reqHeaders =
        [Tuple "Authorization" (gDefaultToURLPiece authorization)]
  let reqQuery =
        []
  let spReq = HttpRequest
                { httpMethod: httpMethod
                , httpPath: reqPath
                , httpHeaders: reqHeaders
                , httpQuery: reqQuery
                , httpBody: printJson <<< encodeJson $ reqBody
                }
  pure spReq

postSocketByFamilyIdByToDevice :: forall m.
                                  MonadReader (SPSettings_ SPParams_) m =>
                                  Key Device -> Key Family -> Key Device
                                  -> m HttpRequest
postSocketByFamilyIdByToDevice reqBody familyId toDevice = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let authorization = spParams_.authorization
  let baseURL = spParams_.baseURL
  let httpMethod = "POST"
  let reqPath = Path ["socket" , gDefaultToURLPiece familyId
        , gDefaultToURLPiece toDevice]
  let reqHeaders =
        [Tuple "Authorization" (gDefaultToURLPiece authorization)]
  let reqQuery =
        []
  let spReq = HttpRequest
                { httpMethod: httpMethod
                , httpPath: reqPath
                , httpHeaders: reqHeaders
                , httpQuery: reqQuery
                , httpBody: printJson <<< encodeJson $ reqBody
                }
  pure spReq

receiveSocketByFamilyIdByToDevice :: forall m.
                                     MonadReader (SPSettings_ SPParams_) m =>
                                     Key Family -> Key Device -> m HttpRequest
receiveSocketByFamilyIdByToDevice familyId toDevice = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let authorization = spParams_.authorization
  let baseURL = spParams_.baseURL
  let httpMethod = "RECEIVE"
  let reqPath = Path ["socket" , gDefaultToURLPiece familyId
        , gDefaultToURLPiece toDevice]
  let reqHeaders =
        [Tuple "Authorization" (gDefaultToURLPiece authorization)]
  let reqQuery =
        []
  let spReq = HttpRequest
                { httpMethod: httpMethod
                , httpPath: reqPath
                , httpHeaders: reqHeaders
                , httpQuery: reqQuery
                , httpBody: ""
                }
  pure spReq

putSocketByFamilyIdByFromDeviceByToDeviceByChannelId :: forall m.
                                                        MonadReader (SPSettings_ SPParams_) m
                                                        => String -> Key Family
                                                        -> Key Device
                                                        -> Key Device -> Secret
                                                        -> m HttpRequest
putSocketByFamilyIdByFromDeviceByToDeviceByChannelId reqBody familyId fromDevice
                                                     toDevice channelId = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let authorization = spParams_.authorization
  let baseURL = spParams_.baseURL
  let httpMethod = "PUT"
  let reqPath = Path ["socket" , gDefaultToURLPiece familyId
        , gDefaultToURLPiece fromDevice , gDefaultToURLPiece toDevice
        , gDefaultToURLPiece channelId]
  let reqHeaders =
        [Tuple "Authorization" (gDefaultToURLPiece authorization)]
  let reqQuery =
        []
  let spReq = HttpRequest
                { httpMethod: httpMethod
                , httpPath: reqPath
                , httpHeaders: reqHeaders
                , httpQuery: reqQuery
                , httpBody: printJson <<< encodeJson $ reqBody
                }
  pure spReq

receiveSocketByFamilyIdByFromDeviceByToDeviceByChannelId :: forall m.
                                                            MonadReader (SPSettings_ SPParams_) m
                                                            => Key Family
                                                            -> Key Device
                                                            -> Key Device
                                                            -> Secret
                                                            -> m HttpRequest
receiveSocketByFamilyIdByFromDeviceByToDeviceByChannelId familyId fromDevice
                                                         toDevice channelId = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let authorization = spParams_.authorization
  let baseURL = spParams_.baseURL
  let httpMethod = "RECEIVE"
  let reqPath = Path ["socket" , gDefaultToURLPiece familyId
        , gDefaultToURLPiece fromDevice , gDefaultToURLPiece toDevice
        , gDefaultToURLPiece channelId]
  let reqHeaders =
        [Tuple "Authorization" (gDefaultToURLPiece authorization)]
  let reqQuery =
        []
  let spReq = HttpRequest
                { httpMethod: httpMethod
                , httpPath: reqPath
                , httpHeaders: reqHeaders
                , httpQuery: reqQuery
                , httpBody: ""
                }
  pure spReq

postOnlineStatusByFamilyId :: forall m. MonadReader (SPSettings_ SPParams_) m =>
                              Tuple (Key Device) DeviceType -> Key Family
                              -> m HttpRequest
postOnlineStatusByFamilyId reqBody familyId = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let authorization = spParams_.authorization
  let baseURL = spParams_.baseURL
  let httpMethod = "POST"
  let reqPath = Path ["onlineStatus" , gDefaultToURLPiece familyId]
  let reqHeaders =
        [Tuple "Authorization" (gDefaultToURLPiece authorization)]
  let reqQuery =
        []
  let spReq = HttpRequest
                { httpMethod: httpMethod
                , httpPath: reqPath
                , httpHeaders: reqHeaders
                , httpQuery: reqQuery
                , httpBody: printJson <<< encodeJson $ reqBody
                }
  pure spReq

putOnlineStatusByFamilyIdByDeviceId :: forall m.
                                       MonadReader (SPSettings_ SPParams_) m =>
                                       DeviceType -> Key Family -> Key Device
                                       -> m HttpRequest
putOnlineStatusByFamilyIdByDeviceId reqBody familyId deviceId = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let authorization = spParams_.authorization
  let baseURL = spParams_.baseURL
  let httpMethod = "PUT"
  let reqPath = Path ["onlineStatus" , gDefaultToURLPiece familyId
        , gDefaultToURLPiece deviceId]
  let reqHeaders =
        [Tuple "Authorization" (gDefaultToURLPiece authorization)]
  let reqQuery =
        []
  let spReq = HttpRequest
                { httpMethod: httpMethod
                , httpPath: reqPath
                , httpHeaders: reqHeaders
                , httpQuery: reqQuery
                , httpBody: printJson <<< encodeJson $ reqBody
                }
  pure spReq

deleteOnlineStatusByFamilyIdByDeviceId :: forall m.
                                          MonadReader (SPSettings_ SPParams_) m
                                          => Key Family -> Key Device
                                          -> m HttpRequest
deleteOnlineStatusByFamilyIdByDeviceId familyId deviceId = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let authorization = spParams_.authorization
  let baseURL = spParams_.baseURL
  let httpMethod = "DELETE"
  let reqPath = Path ["onlineStatus" , gDefaultToURLPiece familyId
        , gDefaultToURLPiece deviceId]
  let reqHeaders =
        [Tuple "Authorization" (gDefaultToURLPiece authorization)]
  let reqQuery =
        []
  let spReq = HttpRequest
                { httpMethod: httpMethod
                , httpPath: reqPath
                , httpHeaders: reqHeaders
                , httpQuery: reqQuery
                , httpBody: ""
                }
  pure spReq

getOnlineStatusByFamilyId :: forall m. MonadReader (SPSettings_ SPParams_) m =>
                             Key Family -> m HttpRequest
getOnlineStatusByFamilyId familyId = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let authorization = spParams_.authorization
  let baseURL = spParams_.baseURL
  let httpMethod = "GET"
  let reqPath = Path ["onlineStatus" , gDefaultToURLPiece familyId]
  let reqHeaders =
        [Tuple "Authorization" (gDefaultToURLPiece authorization)]
  let reqQuery =
        []
  let spReq = HttpRequest
                { httpMethod: httpMethod
                , httpPath: reqPath
                , httpHeaders: reqHeaders
                , httpQuery: reqQuery
                , httpBody: ""
                }
  pure spReq

postFunnyName :: forall m. MonadReader (SPSettings_ SPParams_) m =>
                 m HttpRequest
postFunnyName = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let baseURL = spParams_.baseURL
  let httpMethod = "POST"
  let reqPath = Path ["funnyName"]
  let reqHeaders =
        []
  let reqQuery =
        []
  let spReq = HttpRequest
                { httpMethod: httpMethod
                , httpPath: reqPath
                , httpHeaders: reqHeaders
                , httpQuery: reqQuery
                , httpBody: ""
                }
  pure spReq

getCoffee :: forall m. MonadReader (SPSettings_ SPParams_) m => m HttpRequest
getCoffee = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let baseURL = spParams_.baseURL
  let httpMethod = "GET"
  let reqPath = Path ["coffee"]
  let reqHeaders =
        []
  let reqQuery =
        []
  let spReq = HttpRequest
                { httpMethod: httpMethod
                , httpPath: reqPath
                , httpHeaders: reqHeaders
                , httpQuery: reqQuery
                , httpBody: ""
                }
  pure spReq

