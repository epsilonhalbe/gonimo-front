-- File auto generated by servant-purescript! --
module Gonimo.WebAPI where

import Prelude

import Control.Monad.Aff.Class (class MonadAff, liftAff)
import Control.Monad.Error.Class (class MonadError)
import Control.Monad.Reader.Class (ask, class MonadReader)
import Data.Argonaut.Generic.Aeson (decodeJson, encodeJson)
import Data.Argonaut.Printer (printJson)
import Data.Maybe (Maybe(..))
import Data.Nullable (Nullable(), toNullable)
import Data.Tuple (Tuple)
import Global (encodeURIComponent)
import Gonimo.Server.DbEntities (Account, Client, Family, Invitation)
import Gonimo.Server.Types (AuthToken, ClientType, Coffee)
import Gonimo.Types (Key, Secret)
import Gonimo.WebAPI.Types (AuthData, ClientInfo, InvitationInfo, InvitationReply, SendInvitation)
import Network.HTTP.Affjax (AJAX)
import Prelude (Unit)
import Prim (Array, String)
import Servant.PureScript.Affjax (AjaxError(..), affjax, defaultRequest)
import Servant.PureScript.Settings (SPSettings_(..), gDefaultToURLPiece)
import Servant.PureScript.Util (encodeListQuery, encodeQueryItem, encodeURLPiece, getResult)

newtype SPParams_ = SPParams_ { authorization :: AuthToken
                              , baseURL :: String
                              }

postAccounts :: forall eff m.
                (MonadReader (SPSettings_ SPParams_) m, MonadError AjaxError m, MonadAff ( ajax :: AJAX | eff) m)
                => m AuthData
postAccounts = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let baseURL = spParams_.baseURL
  let httpMethod = "POST"
  let reqUrl = baseURL <> "accounts"
  let reqHeaders =
        []
  affResp <- liftAff $ affjax defaultRequest
                                { method = httpMethod
                                , url = reqUrl
                                , headers = defaultRequest.headers <> reqHeaders
                                }
  getResult decodeJson affResp
  
postInvitations :: forall eff m.
                   (MonadReader (SPSettings_ SPParams_) m, MonadError AjaxError m, MonadAff ( ajax :: AJAX | eff) m)
                   => Key Family -> m (Tuple (Key Invitation) Invitation)
postInvitations reqBody = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let authorization = spParams_.authorization
  let baseURL = spParams_.baseURL
  let httpMethod = "POST"
  let reqUrl = baseURL <> "invitations"
  let reqHeaders =
        [{ field : "Authorization"
         , value : encodeURLPiece spOpts_' authorization
         }]
  affResp <- liftAff $ affjax defaultRequest
                                { method = httpMethod
                                , url = reqUrl
                                , headers = defaultRequest.headers <> reqHeaders
                                , content = toNullable <<< Just <<< printJson <<< encodeJson $ reqBody
                                }
  getResult decodeJson affResp
  
deleteInvitationsByInvitationSecret :: forall eff m.
                                       (MonadReader (SPSettings_ SPParams_) m, MonadError AjaxError m, MonadAff ( ajax :: AJAX | eff) m)
                                       => InvitationReply -> Secret -> m Unit
deleteInvitationsByInvitationSecret reqBody invitationSecret = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let authorization = spParams_.authorization
  let baseURL = spParams_.baseURL
  let httpMethod = "DELETE"
  let reqUrl = baseURL <> "invitations"
        <> "/" <> encodeURLPiece spOpts_' invitationSecret
  let reqHeaders =
        [{ field : "Authorization"
         , value : encodeURLPiece spOpts_' authorization
         }]
  affResp <- liftAff $ affjax defaultRequest
                                { method = httpMethod
                                , url = reqUrl
                                , headers = defaultRequest.headers <> reqHeaders
                                , content = toNullable <<< Just <<< printJson <<< encodeJson $ reqBody
                                }
  getResult decodeJson affResp
  
postInvitationOutbox :: forall eff m.
                        (MonadReader (SPSettings_ SPParams_) m, MonadError AjaxError m, MonadAff ( ajax :: AJAX | eff) m)
                        => SendInvitation -> m Unit
postInvitationOutbox reqBody = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let authorization = spParams_.authorization
  let baseURL = spParams_.baseURL
  let httpMethod = "POST"
  let reqUrl = baseURL <> "invitationOutbox"
  let reqHeaders =
        [{ field : "Authorization"
         , value : encodeURLPiece spOpts_' authorization
         }]
  affResp <- liftAff $ affjax defaultRequest
                                { method = httpMethod
                                , url = reqUrl
                                , headers = defaultRequest.headers <> reqHeaders
                                , content = toNullable <<< Just <<< printJson <<< encodeJson $ reqBody
                                }
  getResult decodeJson affResp
  
putInvitationInfoByInvitationSecret :: forall eff m.
                                       (MonadReader (SPSettings_ SPParams_) m, MonadError AjaxError m, MonadAff ( ajax :: AJAX | eff) m)
                                       => Secret -> m InvitationInfo
putInvitationInfoByInvitationSecret invitationSecret = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let authorization = spParams_.authorization
  let baseURL = spParams_.baseURL
  let httpMethod = "PUT"
  let reqUrl = baseURL <> "invitationInfo"
        <> "/" <> encodeURLPiece spOpts_' invitationSecret
  let reqHeaders =
        [{ field : "Authorization"
         , value : encodeURLPiece spOpts_' authorization
         }]
  affResp <- liftAff $ affjax defaultRequest
                                { method = httpMethod
                                , url = reqUrl
                                , headers = defaultRequest.headers <> reqHeaders
                                }
  getResult decodeJson affResp
  
getDeviceInfosByFamilyId :: forall eff m.
                            (MonadReader (SPSettings_ SPParams_) m, MonadError AjaxError m, MonadAff ( ajax :: AJAX | eff) m)
                            => Key Family
                            -> m (Array (Tuple (Key Client) ClientInfo))
getDeviceInfosByFamilyId familyId = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let authorization = spParams_.authorization
  let baseURL = spParams_.baseURL
  let httpMethod = "GET"
  let reqUrl = baseURL <> "deviceInfos"
        <> "/" <> encodeURLPiece spOpts_' familyId
  let reqHeaders =
        [{ field : "Authorization"
         , value : encodeURLPiece spOpts_' authorization
         }]
  affResp <- liftAff $ affjax defaultRequest
                                { method = httpMethod
                                , url = reqUrl
                                , headers = defaultRequest.headers <> reqHeaders
                                }
  getResult decodeJson affResp
  
postFamilies :: forall eff m.
                (MonadReader (SPSettings_ SPParams_) m, MonadError AjaxError m, MonadAff ( ajax :: AJAX | eff) m)
                => String -> m (Key Family)
postFamilies reqBody = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let authorization = spParams_.authorization
  let baseURL = spParams_.baseURL
  let httpMethod = "POST"
  let reqUrl = baseURL <> "families"
  let reqHeaders =
        [{ field : "Authorization"
         , value : encodeURLPiece spOpts_' authorization
         }]
  affResp <- liftAff $ affjax defaultRequest
                                { method = httpMethod
                                , url = reqUrl
                                , headers = defaultRequest.headers <> reqHeaders
                                , content = toNullable <<< Just <<< printJson <<< encodeJson $ reqBody
                                }
  getResult decodeJson affResp
  
getFamiliesByAccountId :: forall eff m.
                          (MonadReader (SPSettings_ SPParams_) m, MonadError AjaxError m, MonadAff ( ajax :: AJAX | eff) m)
                          => Key Account
                          -> m (Array (Tuple (Key Family) Family))
getFamiliesByAccountId accountId = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let authorization = spParams_.authorization
  let baseURL = spParams_.baseURL
  let httpMethod = "GET"
  let reqUrl = baseURL <> "families" <> "/" <> encodeURLPiece spOpts_' accountId
  let reqHeaders =
        [{ field : "Authorization"
         , value : encodeURLPiece spOpts_' authorization
         }]
  affResp <- liftAff $ affjax defaultRequest
                                { method = httpMethod
                                , url = reqUrl
                                , headers = defaultRequest.headers <> reqHeaders
                                }
  getResult decodeJson affResp
  
postSocketByFamilyIdByToClient :: forall eff m.
                                  (MonadReader (SPSettings_ SPParams_) m, MonadError AjaxError m, MonadAff ( ajax :: AJAX | eff) m)
                                  => Key Client -> Key Family -> Key Client
                                  -> m Secret
postSocketByFamilyIdByToClient reqBody familyId toClient = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let authorization = spParams_.authorization
  let baseURL = spParams_.baseURL
  let httpMethod = "POST"
  let reqUrl = baseURL <> "socket" <> "/" <> encodeURLPiece spOpts_' familyId
        <> "/" <> encodeURLPiece spOpts_' toClient
  let reqHeaders =
        [{ field : "Authorization"
         , value : encodeURLPiece spOpts_' authorization
         }]
  affResp <- liftAff $ affjax defaultRequest
                                { method = httpMethod
                                , url = reqUrl
                                , headers = defaultRequest.headers <> reqHeaders
                                , content = toNullable <<< Just <<< printJson <<< encodeJson $ reqBody
                                }
  getResult decodeJson affResp
  
receiveSocketByFamilyIdByToClient :: forall eff m.
                                     (MonadReader (SPSettings_ SPParams_) m, MonadError AjaxError m, MonadAff ( ajax :: AJAX | eff) m)
                                     => Key Family -> Key Client
                                     -> m (Tuple (Key Client) Secret)
receiveSocketByFamilyIdByToClient familyId toClient = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let authorization = spParams_.authorization
  let baseURL = spParams_.baseURL
  let httpMethod = "RECEIVE"
  let reqUrl = baseURL <> "socket" <> "/" <> encodeURLPiece spOpts_' familyId
        <> "/" <> encodeURLPiece spOpts_' toClient
  let reqHeaders =
        [{ field : "Authorization"
         , value : encodeURLPiece spOpts_' authorization
         }]
  affResp <- liftAff $ affjax defaultRequest
                                { method = httpMethod
                                , url = reqUrl
                                , headers = defaultRequest.headers <> reqHeaders
                                }
  getResult decodeJson affResp
  
putSocketByFamilyIdByFromClientByToClientByChannelId :: forall eff m.
                                                        (MonadReader (SPSettings_ SPParams_) m, MonadError AjaxError m, MonadAff ( ajax :: AJAX | eff) m)
                                                        => String -> Key Family
                                                        -> Key Client
                                                        -> Key Client -> Secret
                                                        -> m Unit
putSocketByFamilyIdByFromClientByToClientByChannelId reqBody familyId fromClient
                                                     toClient channelId = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let authorization = spParams_.authorization
  let baseURL = spParams_.baseURL
  let httpMethod = "PUT"
  let reqUrl = baseURL <> "socket" <> "/" <> encodeURLPiece spOpts_' familyId
        <> "/" <> encodeURLPiece spOpts_' fromClient
        <> "/" <> encodeURLPiece spOpts_' toClient
        <> "/" <> encodeURLPiece spOpts_' channelId
  let reqHeaders =
        [{ field : "Authorization"
         , value : encodeURLPiece spOpts_' authorization
         }]
  affResp <- liftAff $ affjax defaultRequest
                                { method = httpMethod
                                , url = reqUrl
                                , headers = defaultRequest.headers <> reqHeaders
                                , content = toNullable <<< Just <<< printJson <<< encodeJson $ reqBody
                                }
  getResult decodeJson affResp
  
receiveSocketByFamilyIdByFromClientByToClientByChannelId :: forall eff m.
                                                            (MonadReader (SPSettings_ SPParams_) m, MonadError AjaxError m, MonadAff ( ajax :: AJAX | eff) m)
                                                            => Key Family
                                                            -> Key Client
                                                            -> Key Client
                                                            -> Secret
                                                            -> m String
receiveSocketByFamilyIdByFromClientByToClientByChannelId familyId fromClient
                                                         toClient channelId = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let authorization = spParams_.authorization
  let baseURL = spParams_.baseURL
  let httpMethod = "RECEIVE"
  let reqUrl = baseURL <> "socket" <> "/" <> encodeURLPiece spOpts_' familyId
        <> "/" <> encodeURLPiece spOpts_' fromClient
        <> "/" <> encodeURLPiece spOpts_' toClient
        <> "/" <> encodeURLPiece spOpts_' channelId
  let reqHeaders =
        [{ field : "Authorization"
         , value : encodeURLPiece spOpts_' authorization
         }]
  affResp <- liftAff $ affjax defaultRequest
                                { method = httpMethod
                                , url = reqUrl
                                , headers = defaultRequest.headers <> reqHeaders
                                }
  getResult decodeJson affResp
  
postOnlineStatusByFamilyId :: forall eff m.
                              (MonadReader (SPSettings_ SPParams_) m, MonadError AjaxError m, MonadAff ( ajax :: AJAX | eff) m)
                              => Tuple (Key Client) ClientType -> Key Family
                              -> m Unit
postOnlineStatusByFamilyId reqBody familyId = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let authorization = spParams_.authorization
  let baseURL = spParams_.baseURL
  let httpMethod = "POST"
  let reqUrl = baseURL <> "onlineStatus"
        <> "/" <> encodeURLPiece spOpts_' familyId
  let reqHeaders =
        [{ field : "Authorization"
         , value : encodeURLPiece spOpts_' authorization
         }]
  affResp <- liftAff $ affjax defaultRequest
                                { method = httpMethod
                                , url = reqUrl
                                , headers = defaultRequest.headers <> reqHeaders
                                , content = toNullable <<< Just <<< printJson <<< encodeJson $ reqBody
                                }
  getResult decodeJson affResp
  
putOnlineStatusByFamilyIdByClientId :: forall eff m.
                                       (MonadReader (SPSettings_ SPParams_) m, MonadError AjaxError m, MonadAff ( ajax :: AJAX | eff) m)
                                       => ClientType -> Key Family -> Key Client
                                       -> m Unit
putOnlineStatusByFamilyIdByClientId reqBody familyId clientId = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let authorization = spParams_.authorization
  let baseURL = spParams_.baseURL
  let httpMethod = "PUT"
  let reqUrl = baseURL <> "onlineStatus"
        <> "/" <> encodeURLPiece spOpts_' familyId
        <> "/" <> encodeURLPiece spOpts_' clientId
  let reqHeaders =
        [{ field : "Authorization"
         , value : encodeURLPiece spOpts_' authorization
         }]
  affResp <- liftAff $ affjax defaultRequest
                                { method = httpMethod
                                , url = reqUrl
                                , headers = defaultRequest.headers <> reqHeaders
                                , content = toNullable <<< Just <<< printJson <<< encodeJson $ reqBody
                                }
  getResult decodeJson affResp
  
deleteOnlineStatusByFamilyIdByClientId :: forall eff m.
                                          (MonadReader (SPSettings_ SPParams_) m, MonadError AjaxError m, MonadAff ( ajax :: AJAX | eff) m)
                                          => Key Family -> Key Client -> m Unit
deleteOnlineStatusByFamilyIdByClientId familyId clientId = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let authorization = spParams_.authorization
  let baseURL = spParams_.baseURL
  let httpMethod = "DELETE"
  let reqUrl = baseURL <> "onlineStatus"
        <> "/" <> encodeURLPiece spOpts_' familyId
        <> "/" <> encodeURLPiece spOpts_' clientId
  let reqHeaders =
        [{ field : "Authorization"
         , value : encodeURLPiece spOpts_' authorization
         }]
  affResp <- liftAff $ affjax defaultRequest
                                { method = httpMethod
                                , url = reqUrl
                                , headers = defaultRequest.headers <> reqHeaders
                                }
  getResult decodeJson affResp
  
getOnlineStatusByFamilyId :: forall eff m.
                             (MonadReader (SPSettings_ SPParams_) m, MonadError AjaxError m, MonadAff ( ajax :: AJAX | eff) m)
                             => Key Family
                             -> m (Array (Tuple (Key Client) ClientType))
getOnlineStatusByFamilyId familyId = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let authorization = spParams_.authorization
  let baseURL = spParams_.baseURL
  let httpMethod = "GET"
  let reqUrl = baseURL <> "onlineStatus"
        <> "/" <> encodeURLPiece spOpts_' familyId
  let reqHeaders =
        [{ field : "Authorization"
         , value : encodeURLPiece spOpts_' authorization
         }]
  affResp <- liftAff $ affjax defaultRequest
                                { method = httpMethod
                                , url = reqUrl
                                , headers = defaultRequest.headers <> reqHeaders
                                }
  getResult decodeJson affResp
  
postFunnyName :: forall eff m.
                 (MonadReader (SPSettings_ SPParams_) m, MonadError AjaxError m, MonadAff ( ajax :: AJAX | eff) m)
                 => m String
postFunnyName = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let baseURL = spParams_.baseURL
  let httpMethod = "POST"
  let reqUrl = baseURL <> "funnyName"
  let reqHeaders =
        []
  affResp <- liftAff $ affjax defaultRequest
                                { method = httpMethod
                                , url = reqUrl
                                , headers = defaultRequest.headers <> reqHeaders
                                }
  getResult decodeJson affResp
  
getCoffee :: forall eff m.
             (MonadReader (SPSettings_ SPParams_) m, MonadError AjaxError m, MonadAff ( ajax :: AJAX | eff) m)
             => m Coffee
getCoffee = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let baseURL = spParams_.baseURL
  let httpMethod = "GET"
  let reqUrl = baseURL <> "coffee"
  let reqHeaders =
        []
  affResp <- liftAff $ affjax defaultRequest
                                { method = httpMethod
                                , url = reqUrl
                                , headers = defaultRequest.headers <> reqHeaders
                                }
  getResult decodeJson affResp
  
