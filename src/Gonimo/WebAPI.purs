-- File auto generated by servant-purescript! --
module Gonimo.WebAPI where

import Prelude

import Control.Monad.Aff.Class (class MonadAff, liftAff)
import Control.Monad.Error.Class (class MonadError)
import Control.Monad.Reader.Class (ask, class MonadReader)
import Data.Argonaut.Generic.Aeson (decodeJson, encodeJson)
import Data.Argonaut.Printer (printJson)
import Data.Maybe (Maybe(..))
import Data.Nullable (Nullable(), toNullable)
import Data.Tuple (Tuple)
import Global (encodeURIComponent)
import Gonimo.Server.DbEntities (Account, Device, Family, Invitation)
import Gonimo.Server.Types (AuthToken, Coffee, DeviceType)
import Gonimo.Types (Key, Secret)
import Gonimo.WebAPI.Types (AuthData, DeviceInfo, InvitationInfo, InvitationReply, SendInvitation)
import Network.HTTP.Affjax (AJAX)
import Prelude (Unit)
import Prim (Array, String)
import Servant.PureScript.Affjax (AjaxError(..), affjax, defaultRequest)
import Servant.PureScript.Settings (SPSettings_(..), gDefaultToURLPiece)
import Servant.PureScript.Util (encodeListQuery, encodeQueryItem, encodeURLPiece, getResult)

newtype SPParams_ = SPParams_ { authorization :: AuthToken
                              , baseURL :: String
                              }

postAccounts :: forall eff m.
                (MonadReader (SPSettings_ SPParams_) m, MonadError AjaxError m, MonadAff ( ajax :: AJAX | eff) m)
                => m AuthData
postAccounts = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let baseURL = spParams_.baseURL
  let httpMethod = "POST"
  let reqUrl = baseURL <> "accounts"
  let reqHeaders =
        []
  let affReq = defaultRequest
                 { method = httpMethod
                 , url = reqUrl
                 , headers = defaultRequest.headers <> reqHeaders
                 }
  affResp <- liftAff $ affjax affReq
  getResult affReq decodeJson affResp
  
postInvitations :: forall eff m.
                   (MonadReader (SPSettings_ SPParams_) m, MonadError AjaxError m, MonadAff ( ajax :: AJAX | eff) m)
                   => Key Family -> m (Tuple (Key Invitation) Invitation)
postInvitations reqBody = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let authorization = spParams_.authorization
  let baseURL = spParams_.baseURL
  let httpMethod = "POST"
  let reqUrl = baseURL <> "invitations"
  let reqHeaders =
        [{ field : "Authorization"
         , value : encodeURLPiece spOpts_' authorization
         }]
  let affReq = defaultRequest
                 { method = httpMethod
                 , url = reqUrl
                 , headers = defaultRequest.headers <> reqHeaders
                 , content = toNullable <<< Just <<< printJson <<< encodeJson $ reqBody
                 }
  affResp <- liftAff $ affjax affReq
  getResult affReq decodeJson affResp
  
deleteInvitationsByInvitationSecret :: forall eff m.
                                       (MonadReader (SPSettings_ SPParams_) m, MonadError AjaxError m, MonadAff ( ajax :: AJAX | eff) m)
                                       => InvitationReply -> Secret -> m Unit
deleteInvitationsByInvitationSecret reqBody invitationSecret = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let authorization = spParams_.authorization
  let baseURL = spParams_.baseURL
  let httpMethod = "DELETE"
  let reqUrl = baseURL <> "invitations"
        <> "/" <> encodeURLPiece spOpts_' invitationSecret
  let reqHeaders =
        [{ field : "Authorization"
         , value : encodeURLPiece spOpts_' authorization
         }]
  let affReq = defaultRequest
                 { method = httpMethod
                 , url = reqUrl
                 , headers = defaultRequest.headers <> reqHeaders
                 , content = toNullable <<< Just <<< printJson <<< encodeJson $ reqBody
                 }
  affResp <- liftAff $ affjax affReq
  getResult affReq decodeJson affResp
  
postInvitationOutbox :: forall eff m.
                        (MonadReader (SPSettings_ SPParams_) m, MonadError AjaxError m, MonadAff ( ajax :: AJAX | eff) m)
                        => SendInvitation -> m Unit
postInvitationOutbox reqBody = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let authorization = spParams_.authorization
  let baseURL = spParams_.baseURL
  let httpMethod = "POST"
  let reqUrl = baseURL <> "invitationOutbox"
  let reqHeaders =
        [{ field : "Authorization"
         , value : encodeURLPiece spOpts_' authorization
         }]
  let affReq = defaultRequest
                 { method = httpMethod
                 , url = reqUrl
                 , headers = defaultRequest.headers <> reqHeaders
                 , content = toNullable <<< Just <<< printJson <<< encodeJson $ reqBody
                 }
  affResp <- liftAff $ affjax affReq
  getResult affReq decodeJson affResp
  
putInvitationInfoByInvitationSecret :: forall eff m.
                                       (MonadReader (SPSettings_ SPParams_) m, MonadError AjaxError m, MonadAff ( ajax :: AJAX | eff) m)
                                       => Secret -> m InvitationInfo
putInvitationInfoByInvitationSecret invitationSecret = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let authorization = spParams_.authorization
  let baseURL = spParams_.baseURL
  let httpMethod = "PUT"
  let reqUrl = baseURL <> "invitationInfo"
        <> "/" <> encodeURLPiece spOpts_' invitationSecret
  let reqHeaders =
        [{ field : "Authorization"
         , value : encodeURLPiece spOpts_' authorization
         }]
  let affReq = defaultRequest
                 { method = httpMethod
                 , url = reqUrl
                 , headers = defaultRequest.headers <> reqHeaders
                 }
  affResp <- liftAff $ affjax affReq
  getResult affReq decodeJson affResp
  
getDeviceInfosByFamilyId :: forall eff m.
                            (MonadReader (SPSettings_ SPParams_) m, MonadError AjaxError m, MonadAff ( ajax :: AJAX | eff) m)
                            => Key Family
                            -> m (Array (Tuple (Key Device) DeviceInfo))
getDeviceInfosByFamilyId familyId = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let authorization = spParams_.authorization
  let baseURL = spParams_.baseURL
  let httpMethod = "GET"
  let reqUrl = baseURL <> "deviceInfos"
        <> "/" <> encodeURLPiece spOpts_' familyId
  let reqHeaders =
        [{ field : "Authorization"
         , value : encodeURLPiece spOpts_' authorization
         }]
  let affReq = defaultRequest
                 { method = httpMethod
                 , url = reqUrl
                 , headers = defaultRequest.headers <> reqHeaders
                 }
  affResp <- liftAff $ affjax affReq
  getResult affReq decodeJson affResp
  
getAccountsByAccountIdFamilies :: forall eff m.
                                  (MonadReader (SPSettings_ SPParams_) m, MonadError AjaxError m, MonadAff ( ajax :: AJAX | eff) m)
                                  => Key Account
                                  -> m (Array (Tuple (Key Family) Family))
getAccountsByAccountIdFamilies accountId = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let authorization = spParams_.authorization
  let baseURL = spParams_.baseURL
  let httpMethod = "GET"
  let reqUrl = baseURL <> "accounts" <> "/" <> encodeURLPiece spOpts_' accountId
        <> "/" <> "families"
  let reqHeaders =
        [{ field : "Authorization"
         , value : encodeURLPiece spOpts_' authorization
         }]
  let affReq = defaultRequest
                 { method = httpMethod
                 , url = reqUrl
                 , headers = defaultRequest.headers <> reqHeaders
                 }
  affResp <- liftAff $ affjax affReq
  getResult affReq decodeJson affResp
  
postFamilies :: forall eff m.
                (MonadReader (SPSettings_ SPParams_) m, MonadError AjaxError m, MonadAff ( ajax :: AJAX | eff) m)
                => String -> m (Key Family)
postFamilies reqBody = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let authorization = spParams_.authorization
  let baseURL = spParams_.baseURL
  let httpMethod = "POST"
  let reqUrl = baseURL <> "families"
  let reqHeaders =
        [{ field : "Authorization"
         , value : encodeURLPiece spOpts_' authorization
         }]
  let affReq = defaultRequest
                 { method = httpMethod
                 , url = reqUrl
                 , headers = defaultRequest.headers <> reqHeaders
                 , content = toNullable <<< Just <<< printJson <<< encodeJson $ reqBody
                 }
  affResp <- liftAff $ affjax affReq
  getResult affReq decodeJson affResp
  
postSocketByFamilyIdByToDevice :: forall eff m.
                                  (MonadReader (SPSettings_ SPParams_) m, MonadError AjaxError m, MonadAff ( ajax :: AJAX | eff) m)
                                  => Key Device -> Key Family -> Key Device
                                  -> m Secret
postSocketByFamilyIdByToDevice reqBody familyId toDevice = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let authorization = spParams_.authorization
  let baseURL = spParams_.baseURL
  let httpMethod = "POST"
  let reqUrl = baseURL <> "socket" <> "/" <> encodeURLPiece spOpts_' familyId
        <> "/" <> encodeURLPiece spOpts_' toDevice
  let reqHeaders =
        [{ field : "Authorization"
         , value : encodeURLPiece spOpts_' authorization
         }]
  let affReq = defaultRequest
                 { method = httpMethod
                 , url = reqUrl
                 , headers = defaultRequest.headers <> reqHeaders
                 , content = toNullable <<< Just <<< printJson <<< encodeJson $ reqBody
                 }
  affResp <- liftAff $ affjax affReq
  getResult affReq decodeJson affResp
  
receiveSocketByFamilyIdByToDevice :: forall eff m.
                                     (MonadReader (SPSettings_ SPParams_) m, MonadError AjaxError m, MonadAff ( ajax :: AJAX | eff) m)
                                     => Key Family -> Key Device
                                     -> m (Tuple (Key Device) Secret)
receiveSocketByFamilyIdByToDevice familyId toDevice = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let authorization = spParams_.authorization
  let baseURL = spParams_.baseURL
  let httpMethod = "RECEIVE"
  let reqUrl = baseURL <> "socket" <> "/" <> encodeURLPiece spOpts_' familyId
        <> "/" <> encodeURLPiece spOpts_' toDevice
  let reqHeaders =
        [{ field : "Authorization"
         , value : encodeURLPiece spOpts_' authorization
         }]
  let affReq = defaultRequest
                 { method = httpMethod
                 , url = reqUrl
                 , headers = defaultRequest.headers <> reqHeaders
                 }
  affResp <- liftAff $ affjax affReq
  getResult affReq decodeJson affResp
  
putSocketByFamilyIdByFromDeviceByToDeviceByChannelId :: forall eff m.
                                                        (MonadReader (SPSettings_ SPParams_) m, MonadError AjaxError m, MonadAff ( ajax :: AJAX | eff) m)
                                                        => String -> Key Family
                                                        -> Key Device
                                                        -> Key Device -> Secret
                                                        -> m Unit
putSocketByFamilyIdByFromDeviceByToDeviceByChannelId reqBody familyId fromDevice
                                                     toDevice channelId = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let authorization = spParams_.authorization
  let baseURL = spParams_.baseURL
  let httpMethod = "PUT"
  let reqUrl = baseURL <> "socket" <> "/" <> encodeURLPiece spOpts_' familyId
        <> "/" <> encodeURLPiece spOpts_' fromDevice
        <> "/" <> encodeURLPiece spOpts_' toDevice
        <> "/" <> encodeURLPiece spOpts_' channelId
  let reqHeaders =
        [{ field : "Authorization"
         , value : encodeURLPiece spOpts_' authorization
         }]
  let affReq = defaultRequest
                 { method = httpMethod
                 , url = reqUrl
                 , headers = defaultRequest.headers <> reqHeaders
                 , content = toNullable <<< Just <<< printJson <<< encodeJson $ reqBody
                 }
  affResp <- liftAff $ affjax affReq
  getResult affReq decodeJson affResp
  
receiveSocketByFamilyIdByFromDeviceByToDeviceByChannelId :: forall eff m.
                                                            (MonadReader (SPSettings_ SPParams_) m, MonadError AjaxError m, MonadAff ( ajax :: AJAX | eff) m)
                                                            => Key Family
                                                            -> Key Device
                                                            -> Key Device
                                                            -> Secret
                                                            -> m String
receiveSocketByFamilyIdByFromDeviceByToDeviceByChannelId familyId fromDevice
                                                         toDevice channelId = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let authorization = spParams_.authorization
  let baseURL = spParams_.baseURL
  let httpMethod = "RECEIVE"
  let reqUrl = baseURL <> "socket" <> "/" <> encodeURLPiece spOpts_' familyId
        <> "/" <> encodeURLPiece spOpts_' fromDevice
        <> "/" <> encodeURLPiece spOpts_' toDevice
        <> "/" <> encodeURLPiece spOpts_' channelId
  let reqHeaders =
        [{ field : "Authorization"
         , value : encodeURLPiece spOpts_' authorization
         }]
  let affReq = defaultRequest
                 { method = httpMethod
                 , url = reqUrl
                 , headers = defaultRequest.headers <> reqHeaders
                 }
  affResp <- liftAff $ affjax affReq
  getResult affReq decodeJson affResp
  
postOnlineStatusByFamilyId :: forall eff m.
                              (MonadReader (SPSettings_ SPParams_) m, MonadError AjaxError m, MonadAff ( ajax :: AJAX | eff) m)
                              => Tuple (Key Device) DeviceType -> Key Family
                              -> m Unit
postOnlineStatusByFamilyId reqBody familyId = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let authorization = spParams_.authorization
  let baseURL = spParams_.baseURL
  let httpMethod = "POST"
  let reqUrl = baseURL <> "onlineStatus"
        <> "/" <> encodeURLPiece spOpts_' familyId
  let reqHeaders =
        [{ field : "Authorization"
         , value : encodeURLPiece spOpts_' authorization
         }]
  let affReq = defaultRequest
                 { method = httpMethod
                 , url = reqUrl
                 , headers = defaultRequest.headers <> reqHeaders
                 , content = toNullable <<< Just <<< printJson <<< encodeJson $ reqBody
                 }
  affResp <- liftAff $ affjax affReq
  getResult affReq decodeJson affResp
  
putOnlineStatusByFamilyIdByDeviceId :: forall eff m.
                                       (MonadReader (SPSettings_ SPParams_) m, MonadError AjaxError m, MonadAff ( ajax :: AJAX | eff) m)
                                       => DeviceType -> Key Family -> Key Device
                                       -> m Unit
putOnlineStatusByFamilyIdByDeviceId reqBody familyId deviceId = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let authorization = spParams_.authorization
  let baseURL = spParams_.baseURL
  let httpMethod = "PUT"
  let reqUrl = baseURL <> "onlineStatus"
        <> "/" <> encodeURLPiece spOpts_' familyId
        <> "/" <> encodeURLPiece spOpts_' deviceId
  let reqHeaders =
        [{ field : "Authorization"
         , value : encodeURLPiece spOpts_' authorization
         }]
  let affReq = defaultRequest
                 { method = httpMethod
                 , url = reqUrl
                 , headers = defaultRequest.headers <> reqHeaders
                 , content = toNullable <<< Just <<< printJson <<< encodeJson $ reqBody
                 }
  affResp <- liftAff $ affjax affReq
  getResult affReq decodeJson affResp
  
deleteOnlineStatusByFamilyIdByDeviceId :: forall eff m.
                                          (MonadReader (SPSettings_ SPParams_) m, MonadError AjaxError m, MonadAff ( ajax :: AJAX | eff) m)
                                          => Key Family -> Key Device -> m Unit
deleteOnlineStatusByFamilyIdByDeviceId familyId deviceId = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let authorization = spParams_.authorization
  let baseURL = spParams_.baseURL
  let httpMethod = "DELETE"
  let reqUrl = baseURL <> "onlineStatus"
        <> "/" <> encodeURLPiece spOpts_' familyId
        <> "/" <> encodeURLPiece spOpts_' deviceId
  let reqHeaders =
        [{ field : "Authorization"
         , value : encodeURLPiece spOpts_' authorization
         }]
  let affReq = defaultRequest
                 { method = httpMethod
                 , url = reqUrl
                 , headers = defaultRequest.headers <> reqHeaders
                 }
  affResp <- liftAff $ affjax affReq
  getResult affReq decodeJson affResp
  
getOnlineStatusByFamilyId :: forall eff m.
                             (MonadReader (SPSettings_ SPParams_) m, MonadError AjaxError m, MonadAff ( ajax :: AJAX | eff) m)
                             => Key Family
                             -> m (Array (Tuple (Key Device) DeviceType))
getOnlineStatusByFamilyId familyId = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let authorization = spParams_.authorization
  let baseURL = spParams_.baseURL
  let httpMethod = "GET"
  let reqUrl = baseURL <> "onlineStatus"
        <> "/" <> encodeURLPiece spOpts_' familyId
  let reqHeaders =
        [{ field : "Authorization"
         , value : encodeURLPiece spOpts_' authorization
         }]
  let affReq = defaultRequest
                 { method = httpMethod
                 , url = reqUrl
                 , headers = defaultRequest.headers <> reqHeaders
                 }
  affResp <- liftAff $ affjax affReq
  getResult affReq decodeJson affResp
  
postFunnyName :: forall eff m.
                 (MonadReader (SPSettings_ SPParams_) m, MonadError AjaxError m, MonadAff ( ajax :: AJAX | eff) m)
                 => m String
postFunnyName = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let baseURL = spParams_.baseURL
  let httpMethod = "POST"
  let reqUrl = baseURL <> "funnyName"
  let reqHeaders =
        []
  let affReq = defaultRequest
                 { method = httpMethod
                 , url = reqUrl
                 , headers = defaultRequest.headers <> reqHeaders
                 }
  affResp <- liftAff $ affjax affReq
  getResult affReq decodeJson affResp
  
getCoffee :: forall eff m.
             (MonadReader (SPSettings_ SPParams_) m, MonadError AjaxError m, MonadAff ( ajax :: AJAX | eff) m)
             => m Coffee
getCoffee = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let baseURL = spParams_.baseURL
  let httpMethod = "GET"
  let reqUrl = baseURL <> "coffee"
  let reqHeaders =
        []
  let affReq = defaultRequest
                 { method = httpMethod
                 , url = reqUrl
                 , headers = defaultRequest.headers <> reqHeaders
                 }
  affResp <- liftAff $ affjax affReq
  getResult affReq decodeJson affResp
  
